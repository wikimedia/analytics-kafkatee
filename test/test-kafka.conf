# Tests JSON -> string transformation with Kafka
# * one Kafka input
# * 3 outputs
# * JSON -> string transformation
# * sample-rates 1,10,100


include base.conf

# Number of outputs (you need to create the same number of
# 'output pipe ..' lines below.
env.NOUTS=10

# Number of messages to send
env.NMSGS=10000


# Output encoding
output.encoding = string

# Output formatting
output.format = %{seq},%{field1},%{field2},%{field3},%{seq}


# Execute testpipe.py as an input but pipe its output to a kafka producer.
# This means this input will not produce any messages.
# The sleep allows the kafkatee kafka consumer to read from the end of the
# queue before we start producing, to make sure we dont read any old messages
# and dont miss any new ones.
input [encoding=json,exit.on.exit=true] pipe ./testpipe.py --cnt $NMSGS --genenc json --checkenc string --timeout 100 --config '{"outputs": [{"fifo":"test1.fifo","rate":1},{"fifo":"test2.fifo","rate":10},{"fifo":"test3.fifo","rate":100},{"fifo":"test4.fifo","rate":1},{"fifo":"test5.fifo","rate":1000},{"fifo":"test6.fifo","rate":500},{"fifo":"test7.fifo","rate":3},{"fifo":"test8.fifo","rate":1},{"fifo":"test9.fifo","rate":1},{"fifo":"test10.fifo","rate":1}]}' | (sleep 3 ; rdkafka_example -P -t kafkatee_test -p 0 -b localhost) > /dev/null

# Instead specify a kafka input for the same topic.
input [encoding=json] kafka topic kafkatee_test partition 0 from end

# Output pipe simply writes to FIFOs that testpipe.py reads.
# The number of outputs must be the sa,e as NMSGS above.
output pipe 1 cat >> test1.fifo
output pipe 10 cat >> test2.fifo
output pipe 100 cat >> test3.fifo
output pipe 1 cat >> test4.fifo
output pipe 1000 cat >> test5.fifo
output pipe 500 cat >> test6.fifo
output pipe 3 cat >> test7.fifo
output pipe 1 cat >> test8.fifo
output pipe 1 cat >> test9.fifo
output pipe 1 cat >> test10.fifo

